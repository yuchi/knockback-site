- var numb = function(n) { return '&#' + (10101+n) + ';' };
- var ref = function(d,m,n) { return '<a title="'+d+'" href="#'+m+n+'">'+n+'</a>' };
!!! 5
html
  head
    meta(http-equiv="Content-Type",content="text/html;charset=utf-8")
    title Knockback
    link(rel="stylesheet",href="look.css")
    link(rel="stylesheet",href="lib/highlight/highlightjs/styles/dark.css")
    script(type="application/javascript",src="lib/highlight/highlightjs/highlight.js")
    script(type="application/javascript",src="lib/highlight/highlightjs/languages/javascript.js")
    script(type="application/javascript",src="lib/highlight/highlight-coffee.js")
    script(type="application/javascript",src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js")
    script(type="application/javascript",src="interface.js")
    script(type="application/javascript").
      hljs.tabReplace = '  ';
      hljs.initHighlightingOnLoad();
  body
    #wrap

      header#header
        .lock
          .logo
            .part.left.animated.fadeInRight: img(src="lib/left.svg")
            .part.right.animated.fadeInLeft: img(src="lib/right.svg")
          h1
            span.knock.animated.fadeInRight Knock
            span.back.animated.fadeInLeft back

        h2
          span.knock.animated.fadeIn= "brings Knockout.js "
          span.magic.animated.fadeIn= "magic "
          span.back.animated.fadeIn to Backbone

      //
        nav#navigation
          .separator
            span.label Code
            .selection.codestyle
              .option
                input.auto#cs-cs(type="radio",name="codestyle",value="cs")
                label(for="cs-cs") CoffeeScript
              .option
                input#cs-js(type="radio",name="codestyle",value="js")
                label(for="cs-js") Javascript
          .separator
            span.label Langauge
            .selection.codestyle
              .option
                input#lang-en(type="radio",name="lang",checked)
                label(for="lang-en") EN
              .option
                input#lang-fr(type="radio",name="lang")
                label(for="lang-fr") FR
              .option
                input#lang-it(type="radio",name="lang")
                label(for="lang-it") IT

      section#content.animated.fadeIn

        .cols
          .col: div.content
            h2 Dependencies
            p.
              Knockback requires Backbone (and therefore Underscore.js) and Knockout.js
              to be already loaded on the page. Backbone.ModelRef is optional for lazy
              model loading scenarios.
          .col: div.content
            h2 Features
            ul
              li Localization
              li Knockout.js' bindings and automagical update
              li Backbone's sleek Model definition
              li Dynamic collection sorting
              li Two-way string formatting
          .col: div.content
            h2 Latest <small>0.6</small>
            ul
              li <a href="https://raw.github.com/kmalakoff/knockback/master/knockback.js">Development</a> <small>23 KB</small>
              li <a href="https://raw.github.com/kmalakoff/knockback/master/knockback.min.js">Production</a> <small>14.8 KB</small>

        //
          .content
            h2 Some background
            p Both Knockout and Backbone have their strengths and weaknesses, but together they are amazing!
            p At the same time you can have the strong ORM provided by Backbone and the dynamic view-models that Knockout.js offers.

        .content
          table.comparison
            col
            col.mid
            col
            col.ref
            thead: tr
              th Backbone
              th.kb Knockback
              th Knockout.js
              th(title="Notes") !
            - var count = 0;
            - var refer = 'comparison-';
            - var descr = 'View description';
            tbody
              tr
                td.yes Bullet-proof ORM
                td.done &#9754;
                td.no Weak ORM
                td.hidden
              tr
                td.yes Built-in Serialization / Deserialization
                td.done &#9754;
                td.no Manual serialization
                td.ref!= ref(descr, refer, 1)
              tr
                td.no: abbr(title="Model/View/Controller") MVC
                td.done &#9755;
                td.yes: abbr(title="Model/View/ViewModel") MVVM
                td.hidden
              tr
                td.no Low level DOM maninulation
                td.done &#9755;
                td.yes Reduced jQuery effort
                td.hidden
              tr
                td.no Manual view updating
                td.done &#9755;
                td.yes <code>data-bind</code> based sorcery
                td.hidden
              tr
                td.yes Routing and history support
                td.done &#9754;
                td.no No routing
                td.ref!= ref(descr, refer, 2)
              tr
                td.no Blurred separation between: <br> Views | Controllers
                td.own Proper separation between: <br> Models | Views | Controllers (ViewModels)
                td.no Blurred separation between: <br> Models | Controllers (ViewModels)
                td.ref!= ref(descr, refer, 3)
              tr
                td.hidden
                td.own.dependent Cross-view Model state synchronization
                td.hidden
                td.hidden
              tr
                td.no Messy collection/view updating
                td.own Fully sorted and updated collection views
                td.hidden
                td.hidden
              tr
                td.hidden
                td.own View settings and control properties
                td.hidden
                td.ref!= ref(descr, refer, 4)
              tr
                td.hidden
                td.own.dependent Localization
                td.hidden
                td.hidden
        .content.notes
          h2 Notes
          section
            #comparison-1
              :markdown
                Serialization
                =============

                As you probably know, Backbone is known to have a fantastic syncing system built
                as close as possible to the RESTful pattern. And if this is not good for your
                application you can always opt to build a custom `Backbone.sync` or, if further
                granularity is required, you can customize a Model/Collection's own `sync` function.

                Knockout.js instead does not provide such a feature, and what it offers is a simple
                plugin to map into/from any JSON source.

                Knockback uses Backbone's models and collections, and this means that all the
                serialization features we all love are still there!

            #comparison-2
              :markdown
                Routing
                =======

                In Knockback, while using Knockout.js ViewModel pattern, we developed a full
                pattern that supports Backbone's routing solution.

          section#comparison-3
            :markdown
              (Im)proper use of tools
              =======================

              Too often, in a large Backbone application you find yourself building up views
              with too much logic in them, almost always requiring sub-state management. This is
              actually an improper use of views, which should be as logic-less as possible.

              But you *have* to do things like that, and Backbone doesn't help the developer
              solving this (ethical?) issue.

              In Knockout.js, this is not a problem, because ViewModels differ from Views
              exactly in this: they own states, methods and properties allowing the *views* to
              be logic-less.

              So Knockout solves the blurry View/Controller issue you'll find building large
              applications with Backbone. **But** because Knockout simply provides ViewModels and no
              Models, how can you build a proper MVC/MVVM? *Backbone to the rescue!*

              And the circle is complete: Models from Backbone, and Views/ViewModels from
              Knockout.js.

          section#comparison-4
            :markdown
              Views' settings
              ===============

              Following MVVM principles where a ViewModel is the "View's Model", and therefore
              owns its own properties and methods which are *then* reflected in the View
              itself, Knockback ViewModels can add View setting and control properties, which are not
              (and should not be!) owned by the model.

              What does this allow? Actual settings (*eg* colors for different priorities in a
              task list) to be applied on all the associated ViewModels, or...something more
              interesting, like an design pattern for localization.

              If you consider localized labels as observed properties, then you can understand
              how Knockback provides internationalization to your applications.

        //
          .content
            h2 An example

            pre.hl(data-for="cs"): code.coffee.
              ContactViewModel = (model) ->
                kb.observables(model, {
                  name:  {key:'name'}
                  email: {key:'email', write: true, default: 'your.name@yourplace.com'}
                  date:  {key:'date', write: true, localizer: LongDateLocalizer}
                }, this)
                return @
              # Cool, isn't it?
            pre.hl(data-for="js"): code.javascript.
              var ContactViewModel = function (model) {
                kb.observables(model, {
                  name:  {key:'name'},
                  email: {key:'email', write: true, default: 'your.name@yourplace.com'},
                  date:  {key:'date', write: true, localizer: LongDateLocalizer } },
                }, this);
                return this;
              };
              // Cool, isn't it?
            p Contenuto